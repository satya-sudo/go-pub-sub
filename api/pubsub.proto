syntax = "proto3";

package pubsub;
option go_package = "github.com/satya-sudo/go-pub-sub/api;api";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// === Core Messages ===

message PublishRequest {
  string topic = 1;
  bytes key = 2;
  bytes value = 3;
  map<string, string> headers = 4;
  int32 partition = 5; // -1 = auto
}

message PublishResponse {
  string topic = 1;
  int32 partition = 2;
  int64 offset = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message SubscribeRequest {
  string topic = 1;
  string group = 2;
  int32 partition = 3; // -1 = all
  int64 offset = 4;    // -1 = latest, 0 = earliest
  bool auto_ack = 5;
}

message Message {
  string topic = 1;
  int32 partition = 2;
  int64 offset = 3;
  bytes key = 4;
  bytes value = 5;
  map<string, string> headers = 6;
  google.protobuf.Timestamp timestamp = 7;
}

message AckRequest {
  string topic = 1;
  int32 partition = 2;
  int64 offset = 3;
  string group = 4;
}

// === Admin Messages ===

message CreateTopicRequest {
  string topic = 1;
  int32 partitions = 2;    // number of partitions
  int64 retention_ms = 3;  // retention in milliseconds
}

message CreateTopicResponse {
  bool ok = 1;
  string reason = 2;
}

message TopicInfoRequest {
  string topic = 1;
}

message TopicInfo {
  string topic = 1;
  int32 partitions = 2;
  int64 retention_ms = 3;
  google.protobuf.Timestamp created_at = 4;
}

message TopicInfoResponse {
  TopicInfo info = 1;
  bool found = 2;
  string reason = 3;
}

message ListTopicsRequest {}

message ListTopicsResponse {
  repeated TopicInfo topics = 1;
}

// === Service Definition ===

service PubSub {
  // producer/consumer APIs
  rpc Publish(PublishRequest) returns (PublishResponse);
  rpc Subscribe(SubscribeRequest) returns (stream Message);
  rpc Ack(AckRequest) returns (google.protobuf.Empty);

  // admin APIs
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);
  rpc GetTopicInfo(TopicInfoRequest) returns (TopicInfoResponse);
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse);
}
